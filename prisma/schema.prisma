// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
    OWNER     // Company owner with full access
    MANAGER   // Company manager with admin access
    EMPLOYEE  // Regular employee/field worker
    // Legacy roles for backward compatibility
    ADMIN
    TECHNICIAN
    CLIENT
}

enum WorkOrderStatus {
    PENDING
    ASSIGNED
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum WorkOrderPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum WorkOrderType {
    INSTALLATION
    MAINTENANCE
    REPAIR
    TROUBLESHOOTING
    INSPECTION
    OTHER
}

enum InvoiceStatus {
    DRAFT
    PENDING
    PAID
    OVERDUE
    CANCELLED
}

enum CustomerType {
    RESIDENTIAL
    COMMERCIAL
    INDUSTRIAL
}

enum PlanType {
    SOLO      // $29/month - 1 user
    TEAM      // $59/month - up to 10 users
    BUSINESS  // $99/month - up to 50 users
    ENTERPRISE // Custom pricing
}

enum SubscriptionStatus {
    TRIAL         // 14-day trial period
    ACTIVE        // Paid and active
    PAST_DUE      // Payment failed
    CANCELLED     // Cancelled subscription
    EXPIRED       // Trial or subscription expired
}

enum InvitationStatus {
    PENDING
    ACCEPTED
    DECLINED
    EXPIRED
}

// Company and Plan Models
model Company {
    id                String             @id @default(cuid())
    name              String
    email             String?            // Company contact email
    phone             String?
    address           String?
    city              String?
    state             String?
    zipCode           String?
    website           String?
    industry          String?
    timezone          String             @default("America/New_York")
    isActive          Boolean            @default(true)
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    
    // Trial and subscription info
    planType          PlanType           @default(SOLO)
    subscriptionStatus SubscriptionStatus @default(TRIAL)
    trialStartDate    DateTime           @default(now())
    trialEndDate      DateTime           // Set to 14 days from start
    subscriptionId    String?            // External subscription ID (Stripe, etc.)
    
    // Relations
    users             User[]
    customers         Customer[]
    workOrders        WorkOrder[]
    invoices          Invoice[]
    teams             Team[]
    invitations       CompanyInvitation[]
    
    @@index([subscriptionStatus])
    @@index([trialEndDate])
}

model CompanyInvitation {
    id          String           @id @default(cuid())
    email       String
    role        UserRole         @default(EMPLOYEE)
    status      InvitationStatus @default(PENDING)
    token       String           @unique @default(cuid())
    expiresAt   DateTime
    invitedAt   DateTime         @default(now())
    acceptedAt  DateTime?
    
    // Relations
    company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
    companyId   String
    invitedBy   User             @relation(fields: [invitedById], references: [id])
    invitedById String
    acceptedBy  User?            @relation("AcceptedInvitations", fields: [acceptedById], references: [id])
    acceptedById String?
    
    @@unique([companyId, email])
    @@index([token])
    @@index([status])
    @@index([expiresAt])
}

// Core Models
model User {
    id                    String                @id @unique // The id from Supabase Auth.users
    name                  String?
    email                 String?               @unique
    emailVerified         DateTime?
    image                 String?
    role                  UserRole              @default(EMPLOYEE)
    phone                 String?
    jobTitle              String?
    isActive              Boolean               @default(true)
    lastLoginAt           DateTime?
    resetToken            String?
    resetTokenExpiry      DateTime?
    createdAt             DateTime              @default(now())
    updatedAt             DateTime              @updatedAt
    
    // Company relationship
    company               Company?              @relation(fields: [companyId], references: [id])
    companyId             String?
    joinedCompanyAt       DateTime?
    
    // Relations
    posts                 Post[]
    createdWorkOrders     WorkOrder[]           @relation("CreatedByUser")
    assignedWorkOrders    WorkOrder[]           @relation("AssignedToUser")
    customers             Customer[]            @relation("CustomerCreatedBy")
    invoices              Invoice[]             @relation("InvoiceCreatedBy")
    teamMemberships       TeamMember[]
    sentInvitations       CompanyInvitation[]
    acceptedInvitations   CompanyInvitation[]   @relation("AcceptedInvitations")
    
    @@index([email])
    @@index([role])
    @@index([companyId])
}

model Customer {
    id          String       @id @default(cuid())
    name        String
    email       String?
    phone       String?
    address     String?
    city        String?
    state       String?
    zipCode     String?
    type        CustomerType @default(RESIDENTIAL)
    notes       String?
    isActive    Boolean      @default(true)
    latitude    Float?
    longitude   Float?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    
    // Relations
    company       Company      @relation(fields: [companyId], references: [id])
    companyId     String
    createdBy     User         @relation("CustomerCreatedBy", fields: [createdById], references: [id])
    createdById   String
    workOrders    WorkOrder[]
    invoices      Invoice[]
    
    @@index([name])
    @@index([email])
    @@index([type])
    @@index([companyId])
}

model WorkOrder {
    id              String            @id @default(cuid())
    title           String
    description     String?
    status          WorkOrderStatus   @default(PENDING)
    priority        WorkOrderPriority @default(MEDIUM)
    estimatedHours  Float?
    actualHours     Float?
    amount          Float?
    scheduledDate   DateTime?
    completedDate   DateTime?
    location        String?
    notes           String?
    type            WorkOrderType @default(INSTALLATION) // Added missing type field
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    
    // Relations
    company       Company     @relation(fields: [companyId], references: [id])
    companyId     String
    customer      Customer    @relation(fields: [customerId], references: [id])
    customerId    String
    createdBy     User        @relation("CreatedByUser", fields: [createdById], references: [id])
    createdById   String
    assignedTo    User?       @relation("AssignedToUser", fields: [assignedToId], references: [id])
    assignedToId  String?
    team          Team?       @relation(fields: [teamId], references: [id])
    teamId        String?
    invoices      Invoice[]
    
    @@index([status])
    @@index([priority])
    @@index([companyId])
    @@index([customerId])
}

model Team {
    id          String       @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    
    // Relations
    company       Company      @relation(fields: [companyId], references: [id])
    companyId     String
    members       TeamMember[]
    workOrders    WorkOrder[]
    
    @@index([companyId])
}

model TeamMember {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relations
    team      Team     @relation(fields: [teamId], references: [id])
    teamId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique // One-to-one relationship with User
}

model Invoice {
    id          String        @id @default(cuid())
    number      String        @unique @map("invoice_number") // Explicitly map to 'invoice_number'
    amount      Float
    tax         Float         @default(0)
    discount    Float         @default(0)
    total       Float
    status      InvoiceStatus @default(DRAFT)
    issueDate   DateTime      @default(now())
    dueDate     DateTime
    paidDate    DateTime?
    notes       String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    
    // Relations
    company     Company       @relation(fields: [companyId], references: [id])
    companyId   String
    customer    Customer      @relation(fields: [customerId], references: [id])
    customerId  String
    workOrder   WorkOrder     @relation(fields: [workOrderId], references: [id])
    workOrderId String
    createdBy   User          @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
    createdById String
    
    @@index([status])
    @@index([companyId])
    @@index([customerId])
    @@index([workOrderId])
}

model Post {
    id        String   @id @default(cuid())
    title     String
    content   String?
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relations
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?
}

// NextAuth models - Removed as user management is now handled directly by Supabase Auth.
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
